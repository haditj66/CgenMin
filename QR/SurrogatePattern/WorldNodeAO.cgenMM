#pragma once
 
#include "Config.hpp"

#include "@MODULENAME@_cp/@AONAME@.h"
#include "QR_Core.h" 
  
#include "rclcpp/rclcpp.hpp"
#include "std_msgs/msg/string.hpp"

#include <chrono>
#include <memory>
#include <functional>
#include <string>

@PROPERTYEVTS_HEADERS@

//**************************************************************************************************************
//This ABSTRACT class is 100% code generated! users should derive from this class to create their own AO.
//this is the class that will have asychronous calls taken into account. This is what will call the internal
//object.
//This base AO class will be full code generated. However, the class that inherits from this base class will be user created. That class will have
//extra things like timers or subscriptions or etc.


namespace @MODULENAME@_rqt {
	using std::placeholders::_1;
	using std::placeholders::_2;
	
using namespace @MODULENAME@_i::msg;
using namespace @MODULENAME@_i::srv;
using namespace @MODULENAME@_cp;

class @AONAME@NodeAO// : public rclcpp::Node
{
public:



    //std::shared_ptr<WorldNode> fForNode;
    rclcpp::Node*  ForNode;
    @MODULENAME@_cp::@AONAME@* cppobj;

	//this event is published when the node for the real AO is created. All surrogate nodes will be
	// notified by this event. This
    rclcpp::Publisher<@MODULENAME@_i::msg::@AONAME@Data>::SharedPtr publisherInitialized;

	//WNFUNCTION_SERVICES
	@WNFUNCTION_SERVICES@ 
	
	//PROPERTYEVTS_DECLARED
	@PROPERTYEVTS_DECLARED@
 
	//PROPERTYEVTS_CHANGED_DECLARE
	@PROPERTYEVTS_CHANGED_DECLARE@
	//rclcpp::Publisher<qr_core::msg::VoidInt64Changed>::SharedPtr publisherposxChanged;
    //rclcpp::Publisher<qr_core::msg::VoidInt64Changed>::SharedPtr publisherposyChanged;



    //MyNode();
    virtual ~@AONAME@NodeAO ()
    {
        rclcpp::shutdown();
    }


rclcpp::CallbackGroup::SharedPtr client_cb_group_;



    void Init(@MODULENAME@_cp::@AONAME@* obj)//, rclcpp::executors::MultiThreadedExecutor* exec)
    {
//          fForNode = QR_Core::CreateNode<world2_rqt::WorldNode>(exec, obj->Getid());

//         ForNode = (rclcpp::Node *)fForNode.get();

        this->cppobj = obj;
        std::string n = ForNode->get_name();
        cppobj->Setid(n);

        static const rmw_qos_profile_t rmw_qos_profile_services_default_MINE = {
          RMW_QOS_POLICY_HISTORY_KEEP_LAST,
          1000,
          RMW_QOS_POLICY_RELIABILITY_RELIABLE,
          RMW_QOS_POLICY_DURABILITY_VOLATILE,
          RMW_QOS_DEADLINE_DEFAULT,
          RMW_QOS_LIFESPAN_DEFAULT,
          RMW_QOS_POLICY_LIVELINESS_SYSTEM_DEFAULT,
          RMW_QOS_LIVELINESS_LEASE_DURATION_DEFAULT,
          false};

        client_cb_group_ = ForNode->create_callback_group(
            rclcpp::CallbackGroupType::MutuallyExclusive);
			
			
		//WNFUNCTION_SERVICES_DEFINES	
		@WNFUNCTION_SERVICES_DEFINES@



        // I need a publisher to the initialized event. This event will need to be
        // pulished in the initialize function that must be called after this
        // constructor everytime.
        publisherInitialized = ForNode->create_publisher<@MODULENAME@_i::msg::@AONAME@Data>(
            "/@AONAME@Initialized", 100);

        publisherInitialized->publish(cppobj->GetObjectData());
		
		//PROPERTYEVTS_DECLARED
		//since this deals with data access modifying, This will be managed by the DataAccessManagerNode
		@PROPERTYEVTS_DEFINED@
		
 
		
		//PROPERTYEVTS_CHANGED_DEFINE
		@PROPERTYEVTS_CHANGED_DEFINE@
		
		isInitialized = true;
    }

 
 
	//PROPERTYEVTS_SET_CALLBACKS
	@PROPERTYEVTS_SET_CALLBACKS@

	
 
	//WNFUNCTIONS_IMPL
	@WNFUNCTIONS_IMPL@

  

protected:

	bool isInitialized;

};
}




