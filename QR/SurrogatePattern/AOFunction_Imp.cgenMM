    //the non-async version will just call the async version but will immediately wait for the ticket.
    @ARGRETURN@ @NAMEOFFUNCTION@(@ARGS@) override
    {
        auto ticket = @NAMEOFFUNCTION@_async(@ARGSNAME@);
        return ticket->AwaitRequestUntilFinished();
    }




    TicketFuture_RosService<std::shared_future<
                                rclcpp::Client<@MODULENAME@_i::srv::@NAMEOFFUNCTION@>::SharedResponse>,
                            @MODULENAME@_i::srv::@NAMEOFFUNCTION@_Response::_result_type,
                            @MODULENAME@_i::srv::@NAMEOFFUNCTION@>* TicketFor_@NAMEOFFUNCTION@;


    @NAMEOFFUNCTION@Ticket_t* @NAMEOFFUNCTION@_async(@ARGS@) override
    {
        //in this surrogate, I need to prepare the data for transmission over the network.
        //First I need to package the data into the data interface type for this service function.
        //If one of the arguments for the function is an "AOSurrogate" type, a string Id will be used
        //as a replacement for it. The example for this interface type will be

        //        WorldMoveObject.srv
        //        @MODULENAME@_i::msg::@ARGRETURN@ result
        //        ---
        //        std_msgs::msg::String surrogate
        //        @MODULENAME@_i::msg::Move move

		auto request = std::make_shared<@MODULENAME@_i::srv::@NAMEOFFUNCTION@::Request>();  
        @ARG_FILL_REQUEST_DATAS@
 



        TicketFor_@NAMEOFFUNCTION@= new TicketFuture_RosService<std::shared_future<
                                                           rclcpp::Client<@MODULENAME@_i::srv::@NAMEOFFUNCTION@>::SharedResponse>,
                                                           @MODULENAME@_i::srv::@NAMEOFFUNCTION@::Response::_result_type,
                                                           @MODULENAME@_i::srv::@NAMEOFFUNCTION@>();
        auto result =
            client@NAMEOFFUNCTION@->async_send_request(request, TicketFor_@NAMEOFFUNCTION@->CallbackToServiceVar); 

        TicketFor_@NAMEOFFUNCTION@->SetNewFuture(result.future);

        //create the ticket the user can use to await this request.
        TicketFor_@NAMEOFFUNCTION@->MutexForTicket.lock();
        return (@NAMEOFFUNCTION@Ticket_t*)TicketFor_@NAMEOFFUNCTION@;
    }

