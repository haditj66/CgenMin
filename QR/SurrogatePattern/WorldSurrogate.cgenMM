#pragma once

//place all headers you need here.
##UserCode_header

@DATASYNC_HEADER@

@IS_INHERIT7@

@IS_INHERIT1@



namespace @MODULENAME@_rqt {
@IS_INHERIT6@using namespace @MODULENAME@_i::msg;
using namespace @MODULENAME@_i::srv;
@IS_INHERIT6@using namespace @MODULENAME@_cp;
 

//this gets code generated 100% from the previous  cpp object! there is nothing for the user to do here. all public functions will be code generated over to here.
//This is the surrogate object.
 
@AOFUNCTION_TICKETS@
 
 
//This class is the surrogate class
class @AONAME@Surrogate @IS_INHERIT2@
{
public:

 
    @IS_INHERIT3@

	##UserCode_public

    //This class should not be instantiated by the user. instead the @AONAME@Initialized_Callback will handle
	//instantiations of this class.
@AONAME@Surrogate(std::string id)@IS_INHERIT4@
    {
		##UserCode_constr1
	
        @IS_INHERIT5@

		//you need a spinning node. make sure that node is not being used for the same service you are trying to call. currently TheDataAccessManager is being
		//used for clients.   
		
        auto nodeToUse =  TheDataAccessManagerNode;//rclcpp::Node::make_shared(id+"@AONAME@Surrogate");;

        //instances of surrogates can be created at any point of the application life cycle! THink aboiut the case
        //here where @MODULENAME@ holds a list of gameobjects. These gameobjects are AO that can be created at any time.


        //scratch the bottom!!! ----------------------------------------------------
        //we are assuming that the instance for this surrogate is created already. we need to grab the data for this surrogate
        //before moving on. The reason we need to wait to grab it is because we are assuming that this application relies on this
        //instance being created already. What this means though is that instances of AO CANNOT be instantiated in midst of the application
        //running. For example within function calls might have  @AONAME@* w = new @AONAME@();
 

		//=====================================
		//AOFUNCTION_CLIENTS
		//=====================================
		@AOFUNCTION_CLIENTS@
		
		 
		##UserCode_constr2
SurrogateDatasyncCallbackGroup = TheDataAccessManagerNode->create_callback_group(rclcpp::CallbackGroupType::MutuallyExclusive);		

		//DATASYNC_DEFINE
		@DATASYNC_DEFINE@

    }
 
 public:
 
 	//=====================================
	//AOFUNCTION_IMPS
	//===================================== 
	@AOFUNCTION_IMPS@
 
  
 
	//UPDATE_CALLBACK
	 @UPDATE_CALLBACK@
	 
	 rclcpp::CallbackGroup::SharedPtr SurrogateDatasyncCallbackGroup;
	 //DATASYNC_DECL
	 @DATASYNC_DECL@

	
	//=====================================
	//DATASYNC_IMPS
	//===================================== 
	//@DATASYNC_IMPS@

private:

	##UserCode_priv

	//AOFUNCTION_CLIENT_DECLARES
	@AOFUNCTION_CLIENT_DECLARES@
	 

};


//SURROGATE_INIT
 @SURROGATE_INIT@



}










 

