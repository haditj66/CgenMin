//generated file: test_fake_world_exe_QRmain.cpp
//**********************************************************************
//this is an auto-generated file using the template file located in the directory of /home/luci/QR_Sync/CgenMin/CgenMin/FileTemplates/Files
//ONLY WRITE CODE IN THE UserCode_Section BLOCKS
//If you write code anywhere else,  it will be overwritten. modify the actual template file if needing to modify code outside usersection blocks.


/*****************************************************************************
** Includes
*****************************************************************************/

#ifdef ISForQT__ON
#include <QApplication>
#include "../include/MyQtHeaders/main_window.hpp"
#endif


#include "rclcpp/rclcpp.hpp"
#include "gameobjects_rqt/RockAO.hpp"

//put includes here
##UserCode_a

#include "QR_Core.h"
#include "gameobjects_rqt/Config.hpp"



QR_INIT



using namespace gameobjects_rqt;




/*****************************************************************************
** Main
*****************************************************************************/
int main(int argc, char **argv) {

    int result = 1;

#ifdef ISForQT__ON
    /*********************
    ** Qt
    **********************/

    QApplication app(argc, argv);
    QTStuff::MainWindow w(argc,argv);
    w.setWindowTitle("name window here");
    w.show();
    result = app.exec();

#else



##UserCode_b

    rclcpp::init(argc, argv);


    rclcpp::executors::MultiThreadedExecutor exec;

std::string fileSelect = argv[1] == nullptr ? "" : argv[1];
    auto node =  QR_Core::Init_QR_Core<gameobjects_rqt::RockAO>(&exec,gameobjects_rqt::QRSettings, AO_NAME, fileSelect);



##UserCode_c




    QR_Print("%s started up!", AO_NAME.c_str());
    exec.spin();



    rclcpp::shutdown(); // should not return


#endif



    return result;

}
