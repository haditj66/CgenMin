##Macro1 
 ##LoopIncrement1 
 ##ToFile C:/Users/SyncthingServiceAcct/QR_Sync/world2\rosqt\src\defaultTestRos_QRmain.cpp 
//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################


//===============================
//InstanceName: World1 
//     AO: World
//     type: AOSurrogatePattern
//     isSurrogate: false

//InstanceName: World1 
//     AO: World
//     type: AOSurrogatePattern
//     isSurrogate: true

//InstanceName: Rock1 
//     AO: Gameobject
//     type: AOSurrogatePattern
//     isSurrogate: false

//InstanceName: Rock2 
//     AO: Gameobject
//     type: AOSurrogatePattern
//     isSurrogate: true


//AO: world 
//instances: world 
//type: surrogate pattern 
//isSurrogate: false
//===============================

#include "rclcpp/rclcpp.hpp"

//AO_MAINHEADER
#include "world2_rqt/WorldNode.hpp"
#include "world2_rqt/WorldSurrogate.h"
#include "world2_rqt/GameobjectNode.hpp"
#include "world2_rqt/GameobjectSurrogate.h"
 

##UserCode_header 
 
#include "QR_Core.h"
#include "world2_rqt/Config.hpp"


QR_INIT 

//AO_DECLARES
World* World1_cppobj;
WorldSurrogate* World1surr;
Gameobject* Rock1_cppobj;
GameobjectSurrogate* Rock2surr;
 

int main(int argc, char **argv) {
    int result = 1;
	
	rclcpp::init(argc, argv); 
	
	rclcpp::executors::MultiThreadedExecutor exec;
	
	//loading settings from settings file
    std::string fileSelect = argv[1] == nullptr ? "" : argv[1]; 
    QR_Core::Init_QR_Core(&exec,world2_rqt::QRSettings, AO_NAME, fileSelect);

	//AO defines the user needs to do 
	//example for World of World1: World1_cppobj = new World(...);
//example for Gameobject of Rock1: Rock1_cppobj = new Gameobject(...);
 ##UserCode_aouserdefine
	
	
	 
	##UserCode_main1
	 
	
	//AO_MAININIT
	auto World1_nodeobj = QR_Core::CreateNode <world2_rqt::WorldNode> (&exec, "World1");
World1_nodeobj->Init(World1_cppobj);

auto Rock1_nodeobj = QR_Core::CreateNode <world2_rqt::GameobjectNode> (&exec, "Rock1");
Rock1_nodeobj->Init(Rock1_cppobj);

 
	
	
	##UserCode_main2
	  
	//surrogate initializing. if you want to  get a surrogate object, dont instantiate one, 
	//instead use function WorldBase::GetObjectFromPool("WorldNode");
	
	//surrogate AO are automatically created from this class. when 
	//a real object is created somewhere, this class will get the event and update the respective surrogate. 
	//This will grab any data not updated via the gets
	WorldInit* Worldinit = new WorldInit(); Worldinit->InitializeSurrogates();

WorldSurrogate* World1surr = new WorldSurrogate("World1");

GameobjectInit* Gameobjectinit = new GameobjectInit(); Gameobjectinit->InitializeSurrogates();

GameobjectSurrogate* Rock2surr = new GameobjectSurrogate("Rock2");

 
	
	QR_Print("started up!");
    exec.spin();



    rclcpp::shutdown();
    return result;
}


##UserCode_main3






